#include <Arduino.h>
#include "signalProcess.h"
volatile int flag = B00000000; //Used to turn off interupts after the intial signail is sent, so it can be decoded=
unsigned long NEWINTTIM;
unsigned long LASINTTIME;
unsigned long RUNTIME;
const long NECTIME_INTIALMAX = 9500; //Intial pulse of 9ms will pull pin low for 9ms, allows for error
const long NECTIME_INTIALMIN = 8500;
const long NECTIME_HIGHMAX = 4800; //After intial pulse ther is 4.5ms wait, then the signal starts
const long NECTIME_HIGHMIN = 4100;
const long NECTIME = 9000;
const long NECWAIT = 4500;
int step = 1; 
BITREAD saveState(step, LASINTTIME, NEWINTTIM); 
byte inPin;
class REC {
    public:
      REC(const int a) {
        inPin = a; 

    }
     static void begin() {
        if (inPin >=8 && flag == B00000000){ //Determins which Port to use for intrupts, and then sets the correspoding PCIR valve and pin mask
            //PORT B
            PCICR |= B00000001;
            PCMSK0 |= B00000001 << (inPin - 8);
            
        }
        else{ 
            //PORT D
            PCICR |= B00000100;
            PCMSK2 |= B00000001 << (inPin +1);

        }
    }
    static void isNEC(){
        NEWINTTIM = micros();

        switch(step) {
            case 1:
                LASINTTIME = NEWINTTIM;
                step++;
                break;
            case 2:
                if(NEWINTTIM - LASINTTIME > NECTIME_INTIALMAX){
                    step = 1;

                }else if (NEWINTTIM - LASINTTIME < NECTIME_INTIALMIN){
                    step = 1;

                } else {
                    step++;
                    LASINTTIME = NEWINTTIM;

                }
                break;
            case 3: 
                if(NEWINTTIM - LASINTTIME > NECTIME_HIGHMAX) {
                    step = 1;

                } else if(NEWINTTIM - LASINTTIME < NECTIME_HIGHMIN){
                    step = 1;

                }  else {
                    LASINTTIME = NEWINTTIM;
                    step++;

                }
                break;
            case 4:
                if(isOver()){
                    step = 1;
                    Serial.println("made it here");
                } else {
                    BITREAD::readBit();
                    Serial.println(step);
                }
                break;
        }

    }
};    
//ISRS
ISR (PCINT0_vect) { //turns off inturputs and starts the isNEC process
        //noInterrupts();
 
     //   PCICR = flag; //Turns off the inttrupts so the signail itself doesn't trigger a inttrupt
        // flag = B00000001;
        REC::isNEC();


    }

ISR (PCINT2_vect) {

        REC::isNEC();  // THE FUN BEGINS

        
}
